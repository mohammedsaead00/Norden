// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NordenAPI.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace NordenAPI.Migrations
{
    [DbContext(typeof(NordenDbContext))]
    [Migration("20251019211612_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("NordenAPI.Models.Cart", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("NordenAPI.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(4720),
                            Description = "Winter coats and jackets",
                            ImageUrl = "https://images.unsplash.com/photo-1551028719-00167b16eac5?w=200",
                            Name = "Coats"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(4726),
                            Description = "Professional blazers",
                            ImageUrl = "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=200",
                            Name = "Blazers"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(4728),
                            Description = "Dress shirts and casual shirts",
                            ImageUrl = "https://images.unsplash.com/photo-1596755094514-f87e34085b2c?w=200",
                            Name = "Shirts"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(4729),
                            Description = "Designer jeans",
                            ImageUrl = "https://images.unsplash.com/photo-1542272604-787c3835535d?w=200",
                            Name = "Jeans"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(4730),
                            Description = "Luxury sweaters",
                            ImageUrl = "https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=200",
                            Name = "Sweaters"
                        });
                });

            modelBuilder.Entity("NordenAPI.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShippingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Total")
                        .HasColumnType("numeric");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("NordenAPI.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsNew")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("numeric");

                    b.Property<int>("Stock")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(5154),
                            Description = "Premium wool coat for winter",
                            ImageUrl = "https://images.unsplash.com/photo-1551028719-00167b16eac5?w=400",
                            IsFeatured = true,
                            IsNew = true,
                            Name = "Luxury Wool Coat",
                            Price = 299.99m,
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(5169),
                            Description = "Professional blazer for business",
                            ImageUrl = "https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=400",
                            IsFeatured = true,
                            IsNew = false,
                            Name = "Classic Blazer",
                            Price = 199.99m,
                            Stock = 30
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 3,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(5172),
                            Description = "Premium silk dress shirt",
                            ImageUrl = "https://images.unsplash.com/photo-1596755094514-f87e34085b2c?w=400",
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Silk Dress Shirt",
                            Price = 89.99m,
                            Stock = 75
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 4,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(5174),
                            Description = "High-quality designer jeans",
                            ImageUrl = "https://images.unsplash.com/photo-1542272604-787c3835535d?w=400",
                            IsFeatured = true,
                            IsNew = false,
                            Name = "Designer Jeans",
                            Price = 149.99m,
                            Stock = 40
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 5,
                            CreatedAt = new DateTime(2025, 10, 19, 21, 16, 12, 83, DateTimeKind.Utc).AddTicks(5176),
                            Description = "Luxury cashmere sweater",
                            ImageUrl = "https://images.unsplash.com/photo-1434389677669-e08b4cac3105?w=400",
                            IsFeatured = false,
                            IsNew = true,
                            Name = "Cashmere Sweater",
                            Price = 179.99m,
                            Stock = 25
                        });
                });

            modelBuilder.Entity("NordenAPI.Models.Review", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("Rating")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("NordenAPI.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("NordenAPI.Models.Wishlist", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Wishlist");
                });
#pragma warning restore 612, 618
        }
    }
}
